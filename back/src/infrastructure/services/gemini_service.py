import os
import google.generativeai as genai
from typing import Optional
from src.domain.interfaces.dialog_system_service import DialogSystemServiceInterface

class GeminiService(DialogSystemServiceInterface):
    """Implementation of the AI service using Google Gemini"""
    
    def __init__(self, api_key: Optional[str] = None):
        """
        Initialize the Gemini service
        
        Args:
            api_key: Google Gemini API key. If not provided, looks for it in environment variables
        """
        self.api_key = api_key or os.getenv("GEMINI_API_KEY")
        if not self.api_key:
            raise ValueError("GEMINI_API_KEY must be configured as environment variable or passed as parameter")
        
        # Configure Gemini
        genai.configure(api_key=self.api_key)
        self.model = genai.GenerativeModel('gemini-2.5-flash')
    
    async def generate_response(
        self,
        system_prompt: str,
        user_prompt: str,
        context: Optional[str] = None
    ) -> str:
        """
        Generate a response using Gemini
        
        Args:
            system_prompt: Instructions on how the model should respond
            user_prompt: User's question or prompt
            context: Optional additional context for the conversation
            
        Returns:
            str: Response generated by the model
        """
        try:
            # Build the complete prompt
            full_prompt = f"{system_prompt}\n\n"
            if context:
                full_prompt += f"Context: {context}\n\n"
            full_prompt += f"User: {user_prompt}"
            
            # Generate response
            response = self.model.generate_content(full_prompt)
            
            if response.text:
                return response.text
            else:
                return "Sorry, I couldn't generate a response at this time."
                
        except Exception as e:
            # In production, you should log the error
            print(f"Error generating response with Gemini: {str(e)}")
            return "Sorry, an error occurred while processing your request." 